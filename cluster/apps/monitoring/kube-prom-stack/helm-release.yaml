---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prom-stack
  namespace: monitoring
spec:
  interval: 15m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 39.6.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
      interval: 15m
  install:
    createNamespace: true
    remediation:
      retries: 5
  upgrade:
    remediation:
      retries: 5
  values:
    fullnameOverride: prometheus

    alertmanager:
      fullnameOverride: alertmanager
      enabled: true
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "nginx"
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          hajimari.io/enable: "true"
          hajimari.io/appName: "alertmanager"
          hajimari.io/icon: "alert-circle-outline"
          nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
        hosts:
          - 'alertmanager.local.${SECRET_DOMAIN}'
        tls:
          - secretName: alertmanager-tls
            hosts:
              - alertmanager.local.${SECRET_DOMAIN}
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: "longhorn"
              resources:
                requests:
                  storage: 4Gi

    grafana:
      enabled: true
      fullnameOverride: grafana
      forceDeployDatasources: false
      forceDeployDashboards: false
      defaultDashboardsEnabled: true
      defaultDashboardsTimezone: est
      serviceMonitor:
        enabled: true
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "nginx"
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          hajimari.io/enable: "true"
          hajimari.io/appName: "grafana"
          hajimari.io/icon: "chart-areaspline"
          nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
        hosts:
          - 'grafana.local.${SECRET_DOMAIN}'
        tls:
          - secretName: grafana-tls
            hosts:
              - grafana.local.${SECRET_DOMAIN}
      sidecar:
        dashboards:
          enabled: true
          label: grafana_dashboard
          labelValue: "1"
          annotations: {}
          multicluster:
            global:
              enabled: false
            etcd:
              enabled: true
          provider:
            allowUiUpdates: false
      persistence:
        enabled: true
        type: pvc
        storageClassName: longhorn
        accessModes:
          - ReadWriteOnce
        size: 2Gi
        finalizers:
          - kubernetes.io/pvc-protection

    kubeApiServer:
      enabled: true

    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance

    kubeControllerManager:
      enabled: true
      endpoints:
        - 10.33.1.200
        - 10.33.1.201
        - 10.33.1.202

    coreDns:
      enabled: true

    kubeDns:
      enabled: false

    kubeEtcd:
      enabled: true
      endpoints:
        - 10.33.1.200
        - 10.33.1.201
        - 10.33.1.202
      service:
        enabled: true
        port: 2381
        targetPort: 2381

    kubeScheduler:
      enabled: true
      endpoints:
        - 10.33.1.200
        - 10.33.1.201
        - 10.33.1.202

    kubeProxy:
      enabled: true
      endpoints:
        - 10.33.1.200
        - 10.33.1.201
        - 10.33.1.202

    kubeStateMetrics:
      enabled: true
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node

    kube-state-metrics:
      fullnameOverride: kube-state-metrics
      selfMonitor:
        enabled: true
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node

    nodeExporter:
      enabled: true
      serviceMonitor:
        relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels:
              - __meta_kubernetes_pod_node_name
            targetLabel: kubernetes_node

    prometheus-node-exporter:
      fullnameOverride: node-exporter
      podLabels:
        jobLabel: node-exporter
      extraArgs:
        - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
        - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
      service:
        portName: http-metrics
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node
      resources:
        requests:
          memory: 512Mi
          cpu: 250m
        limits:
          memory: 2048Mi

    prometheusOperator:
      enabled: true
      prometheusConfigReloader:
        resources:
          requests:
            cpu: 200m
            memory: 50Mi
          limits:
            memory: 100Mi

    prometheus:
      enabled: true
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "nginx"
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          hajimari.io/enable: "true"
          hajimari.io/appName: "prometheus"
          hajimari.io/icon: "database"
          nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
        hosts:
          - 'prometheus.local.${SECRET_DOMAIN}'
        tls:
          - secretName: prometheus-tls
            hosts:
              - prometheus.local.${SECRET_DOMAIN}
      prometheusSpec:
        replicas: 1
        replicaExternalLabelName: "replica"
        serviceMonitorSelector:
          matchLabels:
            prometheus: monitoring
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retention: 24h
        retentionSize: "20GB"
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: "longhorn"
              resources:
                requests:
                  storage: 20Gi
        additionalScrapeConfigs:
          - job_name: "raspi"
            scrape_interval: 1m
            scrape_timeout: 10s
            honor_timestamps: true
            static_configs:
              - targets:
                  - 10.33.1.98:9090 # raspi prometheus
                  # - 10.33.1.98:9100 # raspi node-exporter
                  # - 10.33.1.98:8080 # raspi cadvisor

    thanosRuler:
      enabled: false
