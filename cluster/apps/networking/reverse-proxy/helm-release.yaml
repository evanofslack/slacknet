---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: reverse-proxy
  namespace: networking
spec:
  interval: 15m
  chart:
    spec:
      # renovate: registryUrl=https://k8s-at-home.com/charts/
      chart: reverse-proxy
      version: 2.4.2
      sourceRef:
        kind: HelmRepository
        name: k8s-at-home
        namespace: flux-system
  install:
    createNamespace: true
    remediation:
      retries: 5
  upgrade:
    remediation:
      retries: 5
  values:
    controller:
      replicas: 3
    # generateTLS:
    #   enabled: true
    #   secretName: ""

    instances:
      - name: proxmox
        enabled: true
        ip: 10.33.1.174
        port: 8006
        ingress:
          annotations:
            cert-manager.io/cluster-issuer: "letsencrypt-production"
            hajimari.io/enable: "true"
            hajimari.io/icon: "monitor-multiple"
            hajimari.io/appName: "proxmox"
            ingress.kubernetes.io/configuration-snippet: "proxy_set_header Host $http_host;\nproxy_set_header
              X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              \     \nproxy_http_version 1.1;\nproxy_set_header Upgrade $http_upgrade;\nproxy_set_header
              Connection $connection_upgrade;      "
            kubernetes.io/tls-acme: "true"
            nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
            nginx.ingress.kubernetes.io/backend-protocol: HTTPS
            nginx.ingress.kubernetes.io/cors-allow-headers: Authorization
            nginx.ingress.kubernetes.io/cors-allow-methods: PUT, GET, POST, OPTIONS, DELETE
            nginx.ingress.kubernetes.io/cors-allow-origin: "*"
            nginx.ingress.kubernetes.io/enable-cors: "true"
            nginx.ingress.kubernetes.io/proxy-body-size: "0"
            nginx.ingress.kubernetes.io/server-snippet: |-
              client_max_body_size 100G;
              server_tokens off;
              proxy_hide_header X-Powered-By;
          tls:
            - hosts:
                - proxmox.local.${SECRET_DOMAIN}
              secretName: "proxmox-tls"
          hosts:
            - host: proxmox.local.${SECRET_DOMAIN}
              path: /
      - name: adguard
        enabled: true
        ip: 10.33.1.98
        port: 80
        ingress:
          annotations:
            cert-manager.io/cluster-issuer: "letsencrypt-production"
            hajimari.io/enable: "true"
            hajimari.io/icon: "shield-check-outline"
            hajimari.io/appName: "adguard"
            nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
          tls:
            - hosts:
                - adguard.local.${SECRET_DOMAIN}
              secretName: "adguard-tls"
          hosts:
            - host: adguard.local.${SECRET_DOMAIN}
              path: /
      - name: raspi-grafana
        enabled: true
        ip: 10.33.1.98
        port: 3000
        ingress:
          annotations:
            cert-manager.io/cluster-issuer: "letsencrypt-production"
            hajimari.io/enable: "true"
            hajimari.io/icon: "raspberry-pi"
            hajimari.io/appName: "raspi grafana"
            nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
          tls:
            - hosts:
                - raspi-grafana.local.${SECRET_DOMAIN}
              secretName: "raspi-grafana-tls"
          hosts:
            - host: raspi-grafana.local.${SECRET_DOMAIN}
              path: /

      - name: navi-grafana
        enabled: true
        ip: 10.33.1.20
        port: 3000
        ingress:
          annotations:
            cert-manager.io/cluster-issuer: "letsencrypt-production"
            hajimari.io/enable: "true"
            hajimari.io/icon: "server"
            hajimari.io/appName: "navi grafana"
            nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
          tls:
            - hosts:
                - navi-grafana.local.${SECRET_DOMAIN}
              secretName: "navi-grafana-tls"
          hosts:
            - host: navi-grafana.local.${SECRET_DOMAIN}
              path: /

    ingressPort:
      # -- Ingress port for non-TLS
      http: 80
      # -- Ingress port for TLS
      tls: 443

    connectionTest:
      # -- seconds to wait before next retry
      waitretry: 2
      # -- second to wait in case no data is received and then try again
      readtimeout: 2
      # -- tries to connect
      tries: 30
